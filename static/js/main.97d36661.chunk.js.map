{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["setTodo","todo","type","payload","currentTodoReducer","state","action","setStatus","status","inititalFilters","query","filterReducer","setTodos","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppSelector","useDispatch","useSelector","TodoList","dispatch","currentStatus","currentQuery","visibleTodos","completed","lowerQuery","toLocaleLowerCase","title","includes","length","className","map","classNames","id","onClick","TodoFilter","onSubmit","event","preventDefault","value","onChange","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","user","setUser","isLoading","setIsLoading","useEffect","onUserLoad","a","userId","result","href","email","name","App","loadingData","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.97d36661.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nexport const removeTodo = (): RemoveAction => ({ type: 'currentTodo/REMOVE' });\n\nexport const setTodo = (todo: Todo): SetAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetAction | RemoveAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case ('currentTodo/REMOVE'):\n      return null;\n\n    case ('currentTodo/SET'):\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","type SetStatus = {\n  type: 'filterStatus/SET';\n  payload: string;\n};\n\ntype SetQuery = {\n  type: 'filterQuery/SET';\n  payload: string;\n};\n\ntype ClearQuery = {\n  type: 'filterQuery/CLEAR';\n};\n\nexport const setStatus = (status: string): SetStatus => ({\n  type: 'filterStatus/SET',\n  payload: status,\n});\n\nexport const setQuery = (query: string): SetQuery => ({\n  type: 'filterQuery/SET',\n  payload: query,\n});\n\nexport const clearQuery = (): ClearQuery => ({\n  type: 'filterQuery/CLEAR',\n});\n\nconst inititalFilters = {\n  query: '',\n  status: 'all',\n};\n\ntype Action = SetStatus | ClearQuery | SetQuery;\n\nconst filterReducer = (\n  state = inititalFilters,\n  action: Action,\n) => {\n  switch (action.type) {\n    case ('filterStatus/SET'):\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    case ('filterQuery/SET'):\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case ('filterQuery/CLEAR'):\n      return {\n        ...state,\n        query: '',\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = { setStatus, clearQuery };\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = { type: 'currentTodos/SET', payload: Todo[] };\n\nexport const setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'currentTodos/SET',\n  payload: todos,\n});\n\ntype Action = SetTodosAction;\n\nconst todosReducer = (todos = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case ('currentTodos/SET'):\n      return action.payload;\n    default:\n      return todos;\n  }\n};\n\nexport const actions = { setTodos };\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { setTodo } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n  const todos: Todo[] = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const currentStatus = useAppSelector(state => state.filter.status);\n  const currentQuery = useAppSelector(state => state.filter.query);\n\n  let visibleTodos = todos;\n\n  if (currentStatus !== 'all') {\n    visibleTodos = visibleTodos.filter(todo => {\n      switch (currentStatus) {\n        case ('active'):\n          return todo.completed === false;\n\n        case ('completed'):\n          return todo.completed === true;\n\n        default: return 0;\n      }\n    });\n  }\n\n  if (currentQuery !== '') {\n    const lowerQuery = currentQuery.toLocaleLowerCase();\n\n    visibleTodos = visibleTodos.filter(todo => todo.title.includes(lowerQuery));\n  }\n\n  return (\n    <>\n      {visibleTodos.length <= 0\n        ? (\n          <p className=\"notification is-warning\">\n            There are no todos matching current filter criteria\n          </p>\n        )\n        : (\n          <table className=\"table is-narrow is-fullwidth\">\n            <thead>\n              <tr>\n                <th>#</th>\n\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {visibleTodos.map(todo => (\n                <tr\n                  data-cy=\"todo\"\n                  key={todo.id}\n                  className={classNames('',\n                    {\n                      'has-background-info-light': todo.id === currentTodo?.id,\n                    })}\n                >\n                  <td className=\"is-vcentered\">{todo.id}</td>\n                  {!todo.completed\n                    ? (<td className=\"is-vcentered\"> </td>)\n                    : (\n                      <td className=\"is-vcentered\"><span className=\"icon\" data-cy=\"iconCompleted\"><i className=\"fas fa-check\" /></span></td>\n                    )}\n                  <td className=\"is-vcentered is-expanded\">\n                    <p className={classNames(\n                      { 'has-text-success': todo.completed },\n                      { 'has-text-danger': !todo.completed },\n                    )}\n                    >\n                      {todo.title}\n                    </p>\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    {todo.id === currentTodo?.id\n                      ? (\n                        <button\n                          data-cy=\"selectButton\"\n                          className=\"button\"\n                          type=\"button\"\n                        >\n                          <span className=\"icon\">\n                            <i className=\"far fa-eye-slash\" />\n                          </span>\n                        </button>\n                      ) : (\n                        <button\n                          data-cy=\"selectButton\"\n                          className=\"button\"\n                          type=\"button\"\n                          onClick={() => dispatch(setTodo(todo))}\n                        >\n                          <span className=\"icon\">\n                            <i className=\"far fa-eye\" />\n                          </span>\n                        </button>\n                      )}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { clearQuery, setQuery, setStatus } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useDispatch();\n  const currentStatus = useAppSelector(state => state.filter.status);\n  const currentQuery = useAppSelector(state => state.filter.query);\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={currentStatus}\n            onChange={(event) => dispatch(setStatus(event.target.value))}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={currentQuery}\n          onChange={(event) => dispatch(setQuery(event.target.value))}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {currentQuery.length > 0 && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => dispatch(clearQuery())}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getUser } from '../../api';\nimport { useAppSelector } from '../../app/hooks';\nimport { removeTodo } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const dispatch = useDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    if (currentTodo) {\n      const onUserLoad = async () => {\n        setIsLoading(true);\n        const result = await getUser(currentTodo?.userId);\n\n        setUser(result);\n\n        setIsLoading(false);\n      };\n\n      onUserLoad();\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading\n        ? (<Loader />)\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${currentTodo?.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => dispatch(removeTodo())}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {currentTodo?.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {currentTodo?.completed\n                  ? (<strong className=\"has-text-success\">Done</strong>)\n                  : (<strong className=\"has-text-danger\">Planned</strong>)}\n                {' by '}\n                <a href={`mailto:${user?.email}`}>{user?.name}</a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { getTodos } from './api';\nimport { setTodos } from './features/todos';\nimport { Loader } from './components/Loader';\nimport { useAppSelector } from './app/hooks';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const loadingData = async () => {\n      setIsLoading(true);\n      const result = await getTodos();\n\n      dispatch(setTodos(result));\n      setIsLoading(false);\n    };\n\n    loadingData();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (<Loader />) : (<TodoList />)}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (<TodoModal />)}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}